{"version":3,"sources":["../../src/current-refinements/current-refinements.ts"],"names":[],"mappings":"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","file":"current-refinements.js","sourceRoot":"","sourcesContent":["import { Component, Input, Inject, forwardRef } from \"@angular/core\";\n\nimport { connectCurrentRefinedValues } from \"instantsearch.js/es/connectors\";\nimport { capitalize, noop, isFunction } from \"lodash-es\";\n\nimport { BaseWidget } from \"../base-widget\";\nimport { NgAisInstantSearch } from \"../instantsearch/instantsearch\";\n\nexport type CurrentRefinementsState = {\n  attributes: {};\n  clearAllClick: Function;\n  clearAllURL: Function;\n  createURL: Function;\n  refine: Function;\n  refinements: {}[];\n};\n\n\nexport class NgAisCurrentRefinements extends BaseWidget {\n  // render options\n   public clearRefinements: \"before\" | \"after\" | boolean = \"after\";\n   public clearRefinementsLabel: string = \"Clear refinements\";\n   public transformItems?: Function;\n\n  // connector options\n   public onlyListedAttributes: boolean = false;\n   public clearsQuery: boolean = false;\n  \n  public attributes: {\n    name: string;\n    label: string;\n  }[] = [];\n\n  public state: CurrentRefinementsState = {\n    attributes: {},\n    clearAllClick: noop,\n    clearAllURL: noop,\n    createURL: noop,\n    refine: noop,\n    refinements: []\n  };\n\n  get isHidden() {\n    return this.state.refinements.length === 0 && this.autoHideContainer;\n  }\n\n  get refinements() {\n    const items = isFunction(this.transformItems)\n      ? this.transformItems(this.state.refinements)\n      : this.state.refinements;\n\n    // group refinements by category? (attributeName && type)\n    return items.reduce((res, { type, attributeName, ...refinement }) => {\n      const match = res.find(\n        r => r.attributeName === attributeName && r.type === type\n      );\n      if (match) {\n        match.items.push({ type, attributeName, ...refinement });\n      } else {\n        res.push({\n          type,\n          attributeName,\n          label: capitalize(attributeName),\n          items: [{ type, attributeName, ...refinement }]\n        });\n      }\n      return res;\n    }, []);\n  }\n\n  get json() {\n    return JSON.stringify(this.refinements, null, 4);\n  }\n\n  constructor(\n    \n    public instantSearchParent: any\n  ) {\n    super(\"CurrentRefinements\");\n  }\n\n  public ngOnInit() {\n    this.createWidget(connectCurrentRefinedValues, {\n      attributes: this.attributes,\n      clearsQuery: this.clearsQuery,\n      onlyListedAttributes: this.onlyListedAttributes\n    });\n    super.ngOnInit();\n  }\n\n  public handleClick(event: MouseEvent, refinement: {}) {\n    event.preventDefault();\n    this.state.refine(refinement);\n  }\n\n  public handleClearAllClick(event: MouseEvent) {\n    event.preventDefault();\n    this.state.clearAllClick();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: \"ng-ais-current-refinements\",\n  template: `\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <button\n        [class]=\"cx('reset')\"\n        (click)=\"handleClearAllClick($event)\"\n        *ngIf=\"clearRefinements === 'before' || clearRefinements === true\">\n        {{clearRefinementsLabel}}\n      </button>\n\n      <ul\n        [class]=\"cx('list')\"\n        *ngFor=\"let refinement of refinements\"\n      >\n        <li [class]=\"cx('item')\">\n          <span [class]=\"cx('label')\">{{refinement.label}}:</span>\n\n          <span\n            [class]=\"cx('category')\"\n            *ngFor=\"let item of refinement.items\"\n          >\n            <span [class]=\"cx('categoryLabel')\">{{item.name}}</span>\n            <button [class]=\"cx('delete')\" (click)=\"handleClick($event, item)\">âœ•</button>\n          </span>\n        </li>\n      </ul>\n\n      <button\n        [class]=\"cx('reset')\"\n        (click)=\"handleClearAllClick($event)\"\n        *ngIf=\"clearRefinements === 'after'\">\n        {{clearRefinementsLabel}}\n      </button>\n    </div>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => NgAisInstantSearch), ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'clearRefinements': [{ type: Input },],\n'clearRefinementsLabel': [{ type: Input },],\n'transformItems': [{ type: Input },],\n'onlyListedAttributes': [{ type: Input },],\n'clearsQuery': [{ type: Input },],\n'attributes': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}