var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { Component, ContentChild, Input, TemplateRef, Inject, forwardRef } from "@angular/core";
import { connectInfiniteHits } from "instantsearch.js/es/connectors";
import { noop, isFunction } from "lodash-es";
import { BaseWidget } from "../base-widget";
import { NgAisInstantSearch } from "../instantsearch/instantsearch";
var NgAisInfiniteHits = /** @class */ (function (_super) {
    __extends(NgAisInfiniteHits, _super);
    function NgAisInfiniteHits(instantSearchParent) {
        var _this = _super.call(this, "InfiniteHits") || this;
        _this.instantSearchParent = instantSearchParent;
        // render options
        _this.showMoreLabel = "Show more results";
        // inner widget state returned from connector
        _this.state = {
            hits: [],
            isLastPage: false,
            showMore: noop,
            results: {}
        };
        _this.updateState = function (state, isFirstRendering) {
            if (isFirstRendering)
                return;
            _this.state = __assign({}, state, { results: state.results, hits: isFunction(_this.transformItems)
                    ? _this.transformItems(state.hits)
                    : state.hits });
        };
        _this.createWidget(connectInfiniteHits, { escapeHits: true });
        return _this;
    }
    NgAisInfiniteHits.prototype.showMore = function (event) {
        event.preventDefault();
        this.state.showMore();
    };
    NgAisInfiniteHits.decorators = [
        { type: Component, args: [{
                    selector: "ng-ais-infinite-hits",
                    template: "\n    <div [class]=\"cx()\">\n      <ng-container *ngTemplateOutlet=\"template; context: state\"></ng-container>\n\n      <!-- default rendering if no template specified -->\n      <div *ngIf=\"!template\">\n        <ul [class]=\"cx('list')\">\n          <li\n            [class]=\"cx('item')\"\n            *ngFor=\"let hit of state.hits\"\n          >\n            <ng-ais-highlight attribute=\"name\" [hit]=\"hit\">\n            </ng-ais-highlight>\n          </li>\n        </ul>\n      </div>\n\n      <button\n        [class]=\"cx('showMore')\"\n        (click)=\"showMore($event)\"\n        [disabled]=\"state.isLastPage\"\n        *ngIf=\"!template\"\n      >\n        {{showMoreLabel}}\n      </button>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    NgAisInfiniteHits.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgAisInstantSearch; }),] },] },
    ]; };
    NgAisInfiniteHits.propDecorators = {
        'template': [{ type: ContentChild, args: [TemplateRef,] },],
        'showMoreLabel': [{ type: Input },],
        'transformItems': [{ type: Input },],
    };
    return NgAisInfiniteHits;
}(BaseWidget));
export { NgAisInfiniteHits };
//# sourceMappingURL=infinite-hits.js.map