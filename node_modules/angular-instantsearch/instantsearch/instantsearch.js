import { Component, Input, Output, EventEmitter, Inject, PLATFORM_ID } from "@angular/core";
import { isPlatformBrowser } from "@angular/common";
import instantsearch from "instantsearch.js/es";
import { VERSION } from "../version";
var InstantSearchInstance = /** @class */ (function () {
    function InstantSearchInstance() {
    }
    return InstantSearchInstance;
}());
export { InstantSearchInstance };
var NgAisInstantSearch = /** @class */ (function () {
    function NgAisInstantSearch(platformId) {
        var _this = this;
        this.platformId = platformId;
        this.instanceName = "default";
        this.change = new EventEmitter();
        this.onRender = function () {
            _this.change.emit({
                results: _this.instantSearchInstance.helper.lastResults,
                state: _this.instantSearchInstance.helper.state
            });
        };
    }
    NgAisInstantSearch.prototype.ngOnInit = function () {
        this.createInstantSearchInstance(this.config);
    };
    NgAisInstantSearch.prototype.ngAfterViewInit = function () {
        this.instantSearchInstance.start();
    };
    NgAisInstantSearch.prototype.ngOnDestroy = function () {
        this.instantSearchInstance.removeListener("render", this.onRender);
        this.instantSearchInstance.dispose();
    };
    NgAisInstantSearch.prototype.createInstantSearchInstance = function (config) {
        // add default searchParameters with highlighting config
        if (!config.searchParameters)
            config.searchParameters = {};
        Object.assign(config.searchParameters, {
            highlightPreTag: "__ais-highlight__",
            highlightPostTag: "__/ais-highlight__"
        });
        // remove URLSync widget if on SSR
        if (!isPlatformBrowser(this.platformId)) {
            config.urlSync = false;
        }
        // custom algolia client agent
        if (!config.createAlgoliaClient) {
            config.createAlgoliaClient = function (algoliasearch, appId, apiKey) {
                var client = algoliasearch(appId, apiKey);
                client.addAlgoliaAgent("angular-instantsearch " + VERSION);
                return client;
            };
        }
        this.instantSearchInstance = instantsearch(config);
        this.instantSearchInstance.on("render", this.onRender);
    };
    NgAisInstantSearch.prototype.addWidget = function (widget) {
        this.instantSearchInstance.addWidget(widget);
    };
    NgAisInstantSearch.prototype.removeWidget = function (widget) {
        this.instantSearchInstance.removeWidget(widget);
    };
    NgAisInstantSearch.decorators = [
        { type: Component, args: [{
                    selector: "ng-ais-instantsearch",
                    template: "<ng-content></ng-content>"
                },] },
    ];
    /** @nocollapse */
    NgAisInstantSearch.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
    ]; };
    NgAisInstantSearch.propDecorators = {
        'config': [{ type: Input },],
        'instanceName': [{ type: Input },],
        'change': [{ type: Output },],
    };
    return NgAisInstantSearch;
}());
export { NgAisInstantSearch };
//# sourceMappingURL=instantsearch.js.map