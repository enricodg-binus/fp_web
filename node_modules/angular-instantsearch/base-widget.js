import { Input } from "@angular/core";
import { isPlatformBrowser } from "@angular/common";
import { noop } from "lodash-es";
import { bem } from "./utils";
var Widget = /** @class */ (function () {
    function Widget() {
    }
    return Widget;
}());
export { Widget };
var BaseWidget = /** @class */ (function () {
    function BaseWidget(widgetName) {
        var _this = this;
        this.state = {};
        this.updateState = function (state, isFirstRendering) {
            if (isFirstRendering) {
                return Promise.resolve().then(function () {
                    _this.state = state;
                });
            }
            _this.state = state;
        };
        this.cx = bem(widgetName);
    }
    BaseWidget.prototype.createWidget = function (connector, options) {
        if (options === void 0) { options = {}; }
        this.widget = connector(this.updateState, noop)(options);
    };
    BaseWidget.prototype.ngOnInit = function () {
        // add widget to the InstantSearch Instance
        this.instantSearchParent.addWidget(this.widget);
    };
    BaseWidget.prototype.ngOnDestroy = function () {
        if (isPlatformBrowser(this.instantSearchParent.platformId)) {
            this.instantSearchParent.removeWidget(this.widget);
        }
    };
    // helper method for genering item list className
    BaseWidget.prototype.getItemClass = function (item) {
        var className = this.cx("item");
        if (item.isRefined) {
            className = className + " " + this.cx("item", "selected");
        }
        return className;
    };
    BaseWidget.propDecorators = {
        'autoHideContainer': [{ type: Input },],
    };
    return BaseWidget;
}());
export { BaseWidget };
//# sourceMappingURL=base-widget.js.map