var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Inject, Component, Input, forwardRef } from "@angular/core";
import { connectRange } from "instantsearch.js/es/connectors";
import { noop } from "lodash-es";
import { BaseWidget } from "../base-widget";
import { NgAisInstantSearch } from "../instantsearch/instantsearch";
import { parseNumberInput } from "../utils";
var NgAisRangeInput = /** @class */ (function (_super) {
    __extends(NgAisRangeInput, _super);
    function NgAisRangeInput(instantSearchParent) {
        var _this = _super.call(this, "RangeInput") || this;
        _this.instantSearchParent = instantSearchParent;
        // render options
        _this.currency = "$";
        _this.separator = "to";
        _this.submitLabel = "Go";
        _this.precision = 2;
        // inner state
        _this.minInputValue = "";
        _this.maxInputValue = "";
        _this.state = {
            range: { min: undefined, max: undefined },
            refine: noop,
            start: [0, 0]
        };
        return _this;
    }
    Object.defineProperty(NgAisRangeInput.prototype, "step", {
        get: function () {
            var precision = parseNumberInput(this.precision) || 2;
            return 1 / Math.pow(10, precision);
        },
        enumerable: true,
        configurable: true
    });
    NgAisRangeInput.prototype.ngOnInit = function () {
        this.createWidget(connectRange, {
            attributeName: this.attribute,
            max: parseNumberInput(this.max),
            min: parseNumberInput(this.min),
            precision: parseNumberInput(this.precision)
        });
        _super.prototype.ngOnInit.call(this);
    };
    NgAisRangeInput.prototype.handleChange = function (event, type) {
        var value = parseNumberInput(event.target.value);
        if (type === "min") {
            this.minInputValue = value;
        }
        else {
            this.maxInputValue = value;
        }
    };
    NgAisRangeInput.prototype.handleSubmit = function (event) {
        event.preventDefault();
        this.state.refine([this.minInputValue, this.maxInputValue]);
    };
    NgAisRangeInput.decorators = [
        { type: Component, args: [{
                    selector: "ng-ais-range-input",
                    template: "\n    <div [class]=\"cx()\">\n      <form\n        [class]=\"cx('form')\"\n        (submit)=\"handleSubmit($event)\"\n        novalidate\n      >\n        <label [class]=\"cx('label')\">\n          <span [class]=\"cx('currency')\">{{currency}}</span>\n          <input\n            [class]=\"cx('input', 'min')\"\n            type=\"number\"\n            [min]=\"state.range.min\"\n            [max]=\"state.range.max\"\n            [placeholder]=\"state.range.min\"\n            [value]=\"minInputValue\"\n            [step]=\"step\"\n            (change)=\"handleChange($event, 'min')\"\n          />\n        </label>\n\n        <span [class]=\"cx('separator')\">{{separator}}</span>\n\n        <label [class]=\"cx('label')\">\n          <span [class]=\"cx('currency')\">{{currency}}</span>\n          <input\n            [class]=\"cx('input', 'max')\"\n            type=\"number\"\n            [min]=\"state.range.min\"\n            [max]=\"state.range.max\"\n            [placeholder]=\"state.range.max\"\n            [value]=\"maxInputValue\"\n            [step]=\"step\"\n            (change)=\"handleChange($event, 'max')\"\n          />\n        </label>\n\n        <button\n          [class]=\"cx('submit')\"\n          (click)=\"handleSubmit($event)\"\n        >\n          {{submitLabel}}\n        </button>\n      </form>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    NgAisRangeInput.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgAisInstantSearch; }),] },] },
    ]; };
    NgAisRangeInput.propDecorators = {
        'currency': [{ type: Input },],
        'separator': [{ type: Input },],
        'submitLabel': [{ type: Input },],
        'attribute': [{ type: Input },],
        'min': [{ type: Input },],
        'max': [{ type: Input },],
        'precision': [{ type: Input },],
    };
    return NgAisRangeInput;
}(BaseWidget));
export { NgAisRangeInput };
//# sourceMappingURL=range-input.js.map