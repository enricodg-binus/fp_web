{"version":3,"sources":["../src/create-ssr-algolia-client.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,kBAAkB,MAAM,qBAAqB,CAAC;AAC1D,OAAO,KAAK,WAAW,MAAM,wBAAwB,CAAC;AAEtD,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,0BAA0B;AAC1B,sEAAsE;AAEtE,IAAM,aAAa,GAAG,kBAAkB,CAAC,OAAO,IAAI,kBAAkB,CAAC;AACvE,IAAM,MAAM,GAAG,WAAW,CAAC,OAAO,IAAI,WAAW,CAAC;AAElD,MAAM,iCAAiC,EAKtC;QAJC,0BAAU,EACV,4BAAW,EACX,gCAAa,EACb,8BAAY;IAEZ,MAAM,CAAC,UAAC,CAAC,EAAE,KAAK,EAAE,MAAM;QACtB,IAAM,MAAM,GAAG,aAAa,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;QAChD,MAAM,CAAC,eAAe,CAAC,2BAAyB,OAAS,CAAC,CAAC;QAE3D,MAAM,CAAC,QAAQ,GAAG,UAAC,MAAM,EAAE,IAAI;YAC7B,IAAI,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC;YAEhC,OAAO,GAAG,OAAO,CAAC,GAAG,CACnB,cAAc,EACd,IAAI,CAAC,MAAM,KAAK,MAAM;gBACpB,CAAC,CAAC,mCAAmC;gBACrC,CAAC,CAAC,kBAAkB,CACvB,CAAC;YAEF,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;YAEpD,IAAM,GAAG,GACP,MAAM,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAErE,IAAM,gBAAgB,GAAG,YAAY,CAAC,WAAS,IAAI,CAAC,IAAI,MAAG,CAAC,CAAC;YAE7D,EAAE,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;gBAC3C,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC,CAAC;gBACjE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;oBACrB,UAAU,EAAE,IAAI,CAAC,MAAM;oBACvB,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,OAAO,EAAE,IAAI,CAAC,OAAO;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBACjC,UAAU;qBACP,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;oBACzB,OAAO,SAAA;oBACP,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,OAAO,EAAE,UAAU;iBACpB,CAAC;qBACD,SAAS,CACR,UAAA,IAAI;oBACF,aAAa,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC1D,OAAO,CAAC;wBACN,UAAU,EAAE,IAAI,CAAC,MAAM;wBACvB,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,OAAO,EAAE,IAAI,CAAC,OAAO;qBACtB,CAAC,CAAC;gBACL,CAAC,EACD,UAAA,IAAI;oBACF,OAAA,MAAM,CAAC;wBACL,UAAU,EAAE,IAAI,CAAC,MAAM;wBACvB,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,OAAO,EAAE,IAAI,CAAC,OAAO;qBACtB,CAAC;gBAJF,CAIE,CACL,CAAC;YACN,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC","file":"create-ssr-algolia-client.js","sourceRoot":"","sourcesContent":["import * as algoliasearchProxy from \"algoliasearch/index\";\nimport * as encodeProxy from \"querystring-es3/encode\";\n\nimport { VERSION } from \"./version\";\n\n// AOT + Rollup workaround\n// https://github.com/rollup/rollup/issues/1267#issuecomment-296395734\n\nconst algoliasearch = algoliasearchProxy.default || algoliasearchProxy;\nconst encode = encodeProxy.default || encodeProxy;\n\nexport function createSSRAlgoliaClient({\n  httpClient,\n  HttpHeaders,\n  transferState,\n  makeStateKey\n}) {\n  return (_, appId, apiKey) => {\n    const client = algoliasearch(appId, apiKey, {});\n    client.addAlgoliaAgent(`angular-instantsearch ${VERSION}`);\n\n    client._request = (rawUrl, opts) => {\n      let headers = new HttpHeaders();\n\n      headers = headers.set(\n        \"content-type\",\n        opts.method === \"POST\"\n          ? \"application/x-www-form-urlencoded\"\n          : \"application/json\"\n      );\n\n      headers = headers.set(\"accept\", \"application/json\");\n\n      const url =\n        rawUrl + (rawUrl.includes(\"?\") ? \"&\" : \"?\") + encode(opts.headers);\n\n      const transferStateKey = makeStateKey(`ngais(${opts.body})`);\n\n      if (transferState.hasKey(transferStateKey)) {\n        const resp = JSON.parse(transferState.get(transferStateKey, {}));\n        return Promise.resolve({\n          statusCode: resp.status,\n          body: resp.body,\n          headers: resp.headers\n        });\n      }\n\n      return new Promise((resolve, reject) => {\n        httpClient\n          .request(opts.method, url, {\n            headers,\n            body: opts.body,\n            observe: \"response\"\n          })\n          .subscribe(\n            resp => {\n              transferState.set(transferStateKey, JSON.stringify(resp));\n              resolve({\n                statusCode: resp.status,\n                body: resp.body,\n                headers: resp.headers\n              });\n            },\n            resp =>\n              reject({\n                statusCode: resp.status,\n                body: resp.body,\n                headers: resp.headers\n              })\n          );\n      });\n    };\n\n    return client;\n  };\n}\n"]}