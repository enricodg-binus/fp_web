{"remainingRequest":"/Users/enrico/code/angular/fp_web/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/enrico/code/angular/fp_web/node_modules/angular-instantsearch/base-widget.js","dependencies":[{"path":"/Users/enrico/code/angular/fp_web/node_modules/angular-instantsearch/base-widget.js","mtime":1519831269000},{"path":"/Users/enrico/code/angular/fp_web/node_modules/cache-loader/dist/cjs.js","mtime":1522355410796},{"path":"/Users/enrico/code/angular/fp_web/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1522355408304}],"contextDependencies":[],"result":["import { Input } from \"@angular/core\";\nimport { isPlatformBrowser } from \"@angular/common\";\nimport { noop } from \"lodash-es\";\nimport { bem } from \"./utils\";\nvar Widget = /*@__PURE__*/ (function () {\n    function Widget() {\n    }\n    return Widget;\n}());\nexport { Widget };\nvar BaseWidget = /*@__PURE__*/ (function () {\n    function BaseWidget(widgetName) {\n        var _this = this;\n        this.state = {};\n        this.updateState = function (state, isFirstRendering) {\n            if (isFirstRendering) {\n                return Promise.resolve().then(function () {\n                    _this.state = state;\n                });\n            }\n            _this.state = state;\n        };\n        this.cx = bem(widgetName);\n    }\n    BaseWidget.prototype.createWidget = function (connector, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        this.widget = connector(this.updateState, noop)(options);\n    };\n    BaseWidget.prototype.ngOnInit = function () {\n        // add widget to the InstantSearch Instance\n        this.instantSearchParent.addWidget(this.widget);\n    };\n    BaseWidget.prototype.ngOnDestroy = function () {\n        if (isPlatformBrowser(this.instantSearchParent.platformId)) {\n            this.instantSearchParent.removeWidget(this.widget);\n        }\n    };\n    // helper method for genering item list className\n    BaseWidget.prototype.getItemClass = function (item) {\n        var className = this.cx(\"item\");\n        if (item.isRefined) {\n            className = className + \" \" + this.cx(\"item\", \"selected\");\n        }\n        return className;\n    };\n    return BaseWidget;\n}());\nexport { BaseWidget };\n//# sourceMappingURL=base-widget.js.map \n",null]}