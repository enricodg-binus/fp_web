{"remainingRequest":"/Users/enrico/code/angular/fp_web/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/enrico/code/angular/fp_web/node_modules/angular-instantsearch/create-ssr-algolia-client.js","dependencies":[{"path":"/Users/enrico/code/angular/fp_web/node_modules/angular-instantsearch/create-ssr-algolia-client.js","mtime":1519831270000},{"path":"/Users/enrico/code/angular/fp_web/node_modules/cache-loader/dist/cjs.js","mtime":1522355410796},{"path":"/Users/enrico/code/angular/fp_web/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1522355408304}],"contextDependencies":[],"result":["import * as algoliasearchProxy from \"algoliasearch/index\";\nimport * as encodeProxy from \"querystring-es3/encode\";\nimport { VERSION } from \"./version\";\n// AOT + Rollup workaround\n// https://github.com/rollup/rollup/issues/1267#issuecomment-296395734\nvar algoliasearch = algoliasearchProxy.default || algoliasearchProxy;\nvar encode = encodeProxy.default || encodeProxy;\nexport function createSSRAlgoliaClient(_a) {\n    var httpClient = _a.httpClient, HttpHeaders = _a.HttpHeaders, transferState = _a.transferState, makeStateKey = _a.makeStateKey;\n    return function (_, appId, apiKey) {\n        var client = algoliasearch(appId, apiKey, {});\n        client.addAlgoliaAgent(\"angular-instantsearch \" + VERSION);\n        client._request = function (rawUrl, opts) {\n            var headers = new HttpHeaders();\n            headers = headers.set(\"content-type\", opts.method === \"POST\"\n                ? \"application/x-www-form-urlencoded\"\n                : \"application/json\");\n            headers = headers.set(\"accept\", \"application/json\");\n            var url = rawUrl + (rawUrl.includes(\"?\") ? \"&\" : \"?\") + encode(opts.headers);\n            var transferStateKey = makeStateKey(\"ngais(\" + opts.body + \")\");\n            if (transferState.hasKey(transferStateKey)) {\n                var resp = JSON.parse(transferState.get(transferStateKey, {}));\n                return Promise.resolve({\n                    statusCode: resp.status,\n                    body: resp.body,\n                    headers: resp.headers\n                });\n            }\n            return new Promise(function (resolve, reject) {\n                httpClient\n                    .request(opts.method, url, {\n                    headers: headers,\n                    body: opts.body,\n                    observe: \"response\"\n                })\n                    .subscribe(function (resp) {\n                    transferState.set(transferStateKey, JSON.stringify(resp));\n                    resolve({\n                        statusCode: resp.status,\n                        body: resp.body,\n                        headers: resp.headers\n                    });\n                }, function (resp) {\n                    return reject({\n                        statusCode: resp.status,\n                        body: resp.body,\n                        headers: resp.headers\n                    });\n                });\n            });\n        };\n        return client;\n    };\n}\n//# sourceMappingURL=create-ssr-algolia-client.js.map",null]}